{"version":3,"sources":["assets/iov-logo.svg","address.ts","Logo.tsx","Jumbo.tsx","MnemonicInput.tsx","App.tsx","Start.tsx","index.tsx"],"names":["module","exports","chainIdForAddress","network","makeAddress","mnemonic","a","wallet","Secp256k1HdWallet","fromMnemonic","toString","chainId","createIdentity","HdPaths","bip44","identity","addressPefix","bankTokens","fractionalDigits","name","ticker","denom","cosmwasmCodec","CosmWasmCodec","identityToAddress","Logo","to","alt","src","iovLogo","height","React","Component","Jumbo","Row","Col","Jumbotron","style","marginBottom","marginTop","padding","Container","display","alignItems","justifyContent","className","this","props","title","hidden","wordlist","EnglishMnemonic","MnemonicInput","typeahead","state","words","clear","_updateSelected","id","multiple","bsSize","ref","onChange","selected","setState","onWordsChanged","onInputChange","input","search","oldWords","newWords","trim","split","filter","Boolean","text","selectHintOnEnter","options","filterBy","option","normalized","toLowerCase","startsWith","emptyState","mnemonicVerificationErrorMessage","undefined","address","App","Scroll","animateScroll","scrollToBottom","count","onClick","generateNewRandomMnemonic","copyMnemonic","clearMnemonic","length","Alert","variant","dismissible","role","type","data-dismiss","aria-label","aria-hidden","Button","disabled","prompt","confirmed","join","copy","refs","MnemonicInput1","setWords","Bip39","Random","getBytes","randomWords","encode","Start","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.583c3639.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iov-logo.ee12fc6d.svg\";","import { CosmWasmCodec } from \"@cosmwasm/bcp\";\nimport { Address, ChainId } from \"@iov/bcp\";\nimport { EnglishMnemonic } from \"@iov/crypto\";\nimport { HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\n\nexport type Network = \"mainnet\" | \"testnet\";\n\nfunction chainIdForAddress(network: \"mainnet\" | \"testnet\"): ChainId {\n  if (network === \"mainnet\") return \"iov-mainnet-2\" as ChainId;\n  else return \"iov-lovenet\" as ChainId; // any testnet chain ID is fine. We just need it for the address prefix\n}\n\nexport async function makeAddress(mnemonic: EnglishMnemonic, network: Network): Promise<Address> {\n  const wallet = Secp256k1HdWallet.fromMnemonic(mnemonic.toString());\n  const chainId = chainIdForAddress(network);\n  const identity = await wallet.createIdentity(chainId, HdPaths.bip44(234, 0, 0, 0));\n  const addressPefix = network === \"mainnet\" ? \"star\" : \"tstar\";\n  const bankTokens = [\n    {\n      fractionalDigits: 9,\n      name: \"Internet Of Value Token\",\n      ticker: \"IOV\",\n      denom: \"niov\",\n    },\n  ];\n  const cosmwasmCodec = new CosmWasmCodec(addressPefix, bankTokens);\n  return cosmwasmCodec.identityToAddress(identity);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport iovLogo from \"./assets/iov-logo.svg\";\n\nclass Logo extends React.Component<{}, {}> {\n  public render(): JSX.Element {\n    return (\n      <Link to=\"/\">\n        <img alt=\"IOV logo\" src={iovLogo} height={56} />\n      </Link>\n    );\n  }\n}\n\nexport default Logo;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Logo from \"./Logo\";\n\ninterface JumboProps {\n  readonly title: string;\n  readonly network?: \"mainnet\" | \"testnet\";\n}\n\nclass Jumbo extends React.Component<JumboProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Row>\n        <Col>\n          <Jumbotron style={{ marginBottom: \"0.5em\", marginTop: \"0.5em\", padding: \"1em\" }}>\n            <Container style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n              <h3 className=\"d-inline mr-2 pull-left\">\n                {this.props.title}\n                &nbsp;\n                <small className=\"badge badge-sm badge-primary align-top\" hidden={!this.props.network}>\n                  {this.props.network}\n                </small>\n              </h3>\n              <span className=\"pull-right\">\n                <Logo />\n              </span>\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Jumbo;\n","import { EnglishMnemonic } from \"@iov/crypto\";\nimport React from \"react\";\nimport { Typeahead, TypeaheadModel } from \"react-bootstrap-typeahead\";\n\nconst wordlist = [...EnglishMnemonic.wordlist]; // create copy of correct type\n\ninterface MnemonicInputProps {\n  readonly id: string;\n  readonly onWordsChanged?: (words: readonly string[]) => void;\n}\n\ninterface MnemonicInputState {\n  readonly words: readonly string[];\n}\n\ninterface PrivateTypeahead<T extends TypeaheadModel> extends Typeahead<T> {\n  readonly clear: () => void;\n  readonly _updateSelected: (selected: T[]) => void;\n}\n\nclass MnemonicInput extends React.Component<MnemonicInputProps, MnemonicInputState> {\n  private typeahead: PrivateTypeahead<string> | null = null;\n\n  public constructor(props: MnemonicInputProps) {\n    super(props);\n    this.state = {\n      words: [],\n    };\n  }\n\n  public setWords(words: readonly string[]): void {\n    if (!this.typeahead) return;\n\n    this.typeahead.clear();\n    this.typeahead._updateSelected([...words]);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <Typeahead\n          id={this.props.id}\n          multiple={true}\n          bsSize=\"lg\"\n          ref={ref => (this.typeahead = ref as PrivateTypeahead<string>)}\n          onChange={selected => {\n            this.setState({ words: selected });\n            this.props.onWordsChanged && this.props.onWordsChanged(selected);\n          }}\n          onInputChange={input => {\n            if (!this.typeahead) return;\n\n            // Process input if some whitespace included\n            if (input.search(/\\s+/) !== -1) {\n              const oldWords = this.state.words;\n              const newWords = input\n                .trim()\n                .split(/\\s+/)\n                .filter(Boolean);\n\n              this.typeahead.setState({ text: \"\" });\n              this.typeahead._updateSelected([...oldWords, ...newWords]);\n            }\n          }}\n          selectHintOnEnter={true}\n          options={wordlist}\n          filterBy={(option, props) => {\n            const normalized = props.text.trim().toLowerCase();\n            return option.startsWith(normalized);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MnemonicInput;\n","import { Bip39, EnglishMnemonic, Random } from \"@iov/crypto\";\nimport copy from \"clipboard-copy\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Scroll from \"react-scroll\";\n\nimport { makeAddress } from \"./address\";\nimport Jumbo from \"./Jumbo\";\nimport MnemonicInput from \"./MnemonicInput\";\n\ninterface AppProps {\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\ninterface AppState {\n  readonly words: readonly string[];\n  readonly mnemonicVerificationErrorMessage: string | undefined;\n  readonly address: string | undefined;\n}\n\nfunction wordCountOk(count: number): boolean {\n  return count === 12 || count === 15 || count === 18 || count === 21 || count === 24;\n}\n\nconst emptyState: AppState = {\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: undefined,\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      ...emptyState,\n    };\n  }\n\n  public componentDidUpdate(): void {\n    if (this.state.address) Scroll.animateScroll.scrollToBottom();\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container className=\"mb-5\">\n        <Jumbo title=\"Starname Network Address Generator\" network={this.props.network} />\n        <Row>\n          <Col>\n            <h4>Enter your mnemonic:</h4>\n            <p>\n              We support English BIP39 mnemonics between 12 and 24 words. The mnemonic represents your private\n              key, which only you should know. If you lose it then you will not be able to access that account\n              any more.\n            </p>\n            <div>\n              <div className=\"d-flex justify-content-end\">\n                <button onClick={() => this.generateNewRandomMnemonic()} className=\"btn btn-link btn-sm\">\n                  Generate random\n                </button>\n                <button onClick={() => this.copyMnemonic()} className=\"btn btn-link btn-sm\">\n                  Copy\n                </button>\n                <button onClick={() => this.clearMnemonic()} className=\"btn btn-link btn-sm\">\n                  Clear\n                </button>\n              </div>\n              <MnemonicInput\n                ref=\"MnemonicInput1\"\n                id=\"input1\"\n                onWordsChanged={words => {\n                  this.setState({\n                    words: words,\n                    address: undefined,\n                    mnemonicVerificationErrorMessage: undefined,\n                  });\n                }}\n              />\n              <div className=\"d-flex justify-content-between mt-2\">\n                <p className=\"small\">{this.state.words.length} words entered.</p>\n              </div>\n\n              <Alert\n                variant=\"danger\"\n                dismissible={true}\n                role=\"alert\"\n                hidden={!this.state.mnemonicVerificationErrorMessage}\n              >\n                {this.state.mnemonicVerificationErrorMessage}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                  onClick={() => this.setState({ mnemonicVerificationErrorMessage: undefined })}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </Alert>\n            </div>\n            <p className=\"text-center\">\n              <Button\n                disabled={!wordCountOk(this.state.words.length)}\n                onClick={() => this.makeAddress()}\n                className=\"btn-lg\"\n              >\n                Show my {this.props.network} address\n              </Button>\n            </p>\n          </Col>\n        </Row>\n        <Row hidden={!this.state.address}>\n          <Col>\n            <Alert variant=\"success\">\n              <p className=\"mb-0\">\n                <strong>Your Starname network address:</strong>\n                <br />\n                {this.state.address}\n              </p>\n            </Alert>\n            <Alert variant=\"warning\">\n              <p className=\"mb-0\">\n                This browser tab contains sensitive information in memory. Please close it as soon as you\n                record your mnemonic.\n              </p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async makeAddress(): Promise<void> {\n    const answer = prompt(\"Did you store the mnemonic in a secure location? If yes then please type 'yes'.\");\n    if ((answer || \"\").trim().toLowerCase() !== \"yes\") {\n      return;\n    }\n\n    try {\n      const confirmed = new EnglishMnemonic(this.state.words.join(\" \"));\n\n      this.setState({\n        address: await makeAddress(confirmed, this.props.network),\n      });\n    } catch (error) {\n      this.setState({\n        mnemonicVerificationErrorMessage: `${error.toString()}. Please check your mnemonic carefully.`,\n      });\n    }\n  }\n\n  private copyMnemonic(): void {\n    const mnemonic = this.state.words.join(\" \");\n    copy(mnemonic);\n  }\n\n  private async clearMnemonic(): Promise<void> {\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords([]);\n  }\n\n  private async generateNewRandomMnemonic(): Promise<void> {\n    const randomWords = Bip39.encode(await Random.getBytes(16))\n      .toString()\n      .split(\" \");\n\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords(randomWords);\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport Jumbo from \"./Jumbo\";\n\ninterface StartProps {}\n\nclass Start extends React.Component<StartProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Jumbo title=\"Starname Network Address Generator\" />\n        <Row>\n          <Col>\n            <h4>Generate software secret</h4>\n            <p>Your address will get a network identifier for one of the following networks.</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/mainnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Mainnet\n            </Link>\n            <p>The Starname main network</p>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/testnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Testnet\n            </Link>\n            <p>All test networks</p>\n          </Col>\n          <Col className=\"\"></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Start;\n","// eslint-disable-next-line simple-import-sort/sort\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Start from \"./Start\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/mainnet\" component={() => <App network=\"mainnet\" />} />\n      <Route exact path=\"/testnet\" component={() => <App network=\"testnet\" />} />\n      <Route component={() => <Start />} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}